{
  "_args": [
    [
      {
        "raw": "../can-control",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "../can-control",
        "spec": "/Users/kevin/dev/can-control",
        "type": "directory"
      },
      "/Users/kevin/dev/canjs"
    ]
  ],
  "_from": "../can-control",
  "_id": "can-control@3.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/can-control",
  "_phantomChildren": {},
  "_requested": {
    "raw": "../can-control",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "../can-control",
    "spec": "/Users/kevin/dev/can-control",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/can-component"
  ],
  "_resolved": "file:../can-control",
  "_shasum": "c512fcfc02a884bbf97d69774922e8bc6fae247f",
  "_shrinkwrap": null,
  "_spec": "../can-control",
  "_where": "/Users/kevin/dev/canjs",
  "author": {
    "name": "Bitovi",
    "email": "contact@bitovi.com",
    "url": "http://bitovi.com"
  },
  "bit-docs": {
    "dependencies": {
      "bit-docs-glob-finder": "^0.0.5",
      "bit-docs-dev": "^0.0.3",
      "bit-docs-js": "^0.0.3",
      "bit-docs-generate-readme": "^0.0.8"
    },
    "glob": {
      "pattern": "**/*.{js,md}",
      "ignore": "node_modules/**/*"
    },
    "readme": {
      "apis": "./docs/apis.json"
    },
    "parent": "can-control"
  },
  "browser": {
    "transform": [
      "cssify"
    ]
  },
  "browserify": {
    "transform": [
      "cssify"
    ]
  },
  "bugs": {
    "url": "https://github.com/canjs/can-control/issues"
  },
  "dependencies": {
    "can-compute": "^3.0.0-pre.14",
    "can-construct": "^3.0.0-pre.8",
    "can-event": "^3.0.0-pre.1",
    "can-observation": "^3.0.0-pre.11",
    "can-util": "^3.0.0-pre.34"
  },
  "description": "[![Build Status](https://travis-ci.org/canjs/can-control.png?branch=master)](https://travis-ci.org/canjs/can-control)",
  "devDependencies": {
    "bit-docs": "0.0.6",
    "can-define": "^0.8.2",
    "can-map": "^3.0.0-pre.9",
    "cssify": "^1.0.2",
    "done-serve": "^0.2.4",
    "donejs-cli": "^0.9.5",
    "generator-donejs": "^0.9.0",
    "jshint": "^2.9.1",
    "steal": "^0.16.0",
    "steal-qunit": "^0.1.1",
    "steal-tools": "^0.16.0",
    "testee": "^0.2.4"
  },
  "gitHead": "e31a0a0360fe0659bbecceff12e91d2ff69e79c9",
  "homepage": "http://canjs.com",
  "keywords": [
    "canjs",
    "canjs-plugin",
    "donejs"
  ],
  "main": "can-control",
  "name": "can-control",
  "optionalDependencies": {},
  "readme": "# can-control\n\n[![Build Status](https://travis-ci.org/canjs/can-control.png?branch=master)](https://travis-ci.org/canjs/can-control)\n\n\n\n\n- <code>[__can-control__ ](#can-control-)</code>\n  - <code>[Control( [staticProperties,] instanceProperties )](#control-staticproperties-instanceproperties-)</code>\n  - <code>[new Control( element, options )](#new-control-element-options-)</code>\n    - _static_\n      - <code>[Control.extend([staticProperties,] instanceProperties)](#controlextendstaticproperties-instanceproperties)</code>\n      - <code>[defaults Object](#defaults-object)</code>\n      - <code>[processors Object\\<[can.Control.processor](#-functionelement-eventname-selector-handler-undefined)(element, eventName, selector, handler, undefined)\\>](#processors-objectcancontrolprocessor-functionelement-eventname-selector-handler-undefinedelement-eventname-selector-handler-undefined)</code>\n    - _prototype_\n      - <code>[control.destroy()](#controldestroy)</code>\n      - <code>[element can.NodeList](#element-cannodelist)</code>\n      - <code>[control.on([el,] selector, eventName, func)](#controlonel-selector-eventname-func)</code>\n      - <code>[control.on()](#controlon)</code>\n      - <code>[options Object](#options-object)</code>\n      - <code>[control.setup(element, options)](#controlsetupelement-options)</code>\n\n## API\n\n\n## <code>__can-control__ </code>\nCreate organized, memory-leak free, rapidly performing, stateful controls with declarative event binding. Use `can.Control` to create UI \ncontrols like tabs, grids, and context menus,\nand organize them into higher-order business rules with\n[can.route]. It can serve as both a traditional view and a traditional controller.\n\n\n\n### <code>Control( [staticProperties,] instanceProperties )</code>\n\n\nCreate a new, extended, control constructor \nfunction. This functionality is inherited from [can.Construct] and is deprecated in favor of using \n[can.Control.extend]. \n\n\n1. __staticProperties__ <code>{Object}</code>:\n  An object of properties and methods that are added the control constructor \n  function directly. The most common property to add is [can.Control.defaults].\n  \n1. __instanceProperties__ <code>{Object}</code>:\n  An object of properties and methods that belong to \n  instances of the `Control` constructor function. These properties are added to the\n  control's `prototype` object. Properties that\n  look like event handlers (ex: `\"click\"` or `\"li mouseenter\"`) are setup\n  as event handlers (see [Listening to events](#section_Listeningtoevents)).\n  \n\n- __returns__ <code>{constructor(element, options) => can.Construct}</code>:\n  A control constructor function that has been\n  extended with the provided `staticProperties` and `instanceProperties`.\n  \n  \n\n### <code>new Control( element, options )</code>\n\n\nCreate an instance of a control. [can.Control.prototype.setup] processes\nthe arguments and sets up event binding. Write your initialization\ncode in [can.Control.prototype.init]. Note, you never call `new can.Control()` directly,\ninstead, you call it on constructor functions extended from `can.Control`.\n\n\n1. __element__ <code>{HTMLElement|can.NodeList|CSSSelectorString}</code>:\n  Specifies the element the control \n  will be created on.\n  \n1. __options__ <code>{Object}</code>:\n  Option values merged with [can.Control.defaults can.Control.defaults]\n  and set as [can.Control.prototype.options this.options].\n  \n\n- __returns__ <code>{}</code>:\n  A new instance of the constructor function extending can.Control.\n  \n\n#### <code>Control.extend([staticProperties,] instanceProperties)</code>\n\n\nCreate a new, extended, control constructor \nfunction. \n\n\n1. __staticProperties__ <code>{Object}</code>:\n  An object of properties and methods that are added the control constructor \n  function directly. The most common property to add is [can.Control.defaults].\n  \n1. __instanceProperties__ <code>{Object}</code>:\n  An object of properties and methods that belong to \n  instances of the `can.Control` constructor function. These properties are added to the\n  control's `prototype` object. Properties that\n  look like event handlers (ex: `\"click\"` or `\"li mouseenter\"`) are setup\n  as event handlers.\n  \n\n- __returns__ <code>{constructor(element, options) => can.Construct}</code>:\n  A control constructor function that has been\n  extended with the provided `staticProperties` and `instanceProperties`.\n  \n#### defaults `{Object}`\n\nDefault values for the Control's options. \n\n\n\n##### <code>Object</code>\n\n#### processors `{Object\\<[can.Control.processor](#-functionelement-eventname-selector-handler-undefined)(element, eventName, selector, handler, undefined)\\>}`\n\nA collection of hookups for custom events on Controls. \n\n\n##### <code>Object\\<[can.Control.processor](#-functionelement-eventname-selector-handler-undefined)(element, eventName, selector, handler, undefined)\\></code>\n\n\n#### <code>control.destroy()</code>\n\n\nPrepares a control for garbage collection and is a place to\nreset any changes the control has made.\n\n#### element `{can.NodeList}`\n\nThe element passed to the Control when creating a new instance. \n\n\n\n##### <code>can.NodeList</code>\n\n\n#### <code>control.on([el,] selector, eventName, func)</code>\n\n\n1. __el__ <code>{HTMLElement|jQuery|collection|Object}</code>:\n  \n  The element to be bound.  If no element is provided, the control's element is used instead.\n1. __selector__ <code>{CSSSelectorString}</code>:\n  A CSS selector for event delegation.\n1. __eventName__ <code>{String}</code>:\n  The name of the event to listen for.\n1. __func__ <code>{function|String}</code>:\n  A callback function or the String name of a control function.  If a control\n  function name is given, the control function is called back with the bound element and event as the first\n  and second parameter.  Otherwise the function is called back like a normal bind.\n\n- __returns__ <code>{Number}</code>:\n  The id of the binding in this._bindings.\n  \n  `on(el, selector, eventName, func)` binds an event handler for an event to a selector under the scope of the given element.\n  \n\n#### <code>control.on()</code>\n\n\nRebind all of a control's event handlers.\n\n\n- __returns__ <code>{Number}</code>:\n  The number of handlers bound to this Control.\n  \n#### options `{Object}`\n\nOptions used to configure a control. \n\n\n\n##### <code>Object</code>\n\n\n#### <code>control.setup(element, options)</code>\n\n\n1. __element__ <code>{HTMLElement|NodeList|String}</code>:\n  The element as passed to the constructor.\n1. __options__ <code>{Object}</code>:\n  option values for the control.  These get added to\n  this.options and merged with [can.Control.static.defaults defaults].\n\n- __returns__ <code>{undefined|Array}</code>:\n  return an array if you want to change what init is called with. By\n  default it is called with the element and options passed to the control.\n  \n## Contributing\n\n### Making a Build\n\nTo make a build of the distributables into `dist/` in the cloned repository run\n\n```\nnpm install\nnode build\n```\n\n### Running the tests\n\nTests can run in the browser by opening a webserver and visiting the `test.html` page.\nAutomated tests that run the tests from the command line in Firefox can be run with\n\n```\nnpm test\n```\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/canjs/can-control.git"
  },
  "scripts": {
    "build": "node build.js",
    "develop": "done-serve --static --develop --port 8080",
    "document": "bit-docs",
    "jshint": "jshint can-control.js can-control_test.js --config",
    "postversion": "git push --tags && git checkout master && git branch -D release && git push",
    "preversion": "npm test && npm run build",
    "release:major": "npm version major && npm publish",
    "release:minor": "npm version minor && npm publish",
    "release:patch": "npm version patch && npm publish",
    "release:pre": "npm version prerelease && npm publish",
    "test": "npm run jshint && npm run testee",
    "testee": "testee test/test.html --browsers firefox",
    "version": "git commit -am \"Update dist for release\" && git checkout -b release && git add -f dist/"
  },
  "system": {
    "configDependencies": [
      "live-reload"
    ],
    "npmAlgorithm": "flat"
  },
  "version": "3.0.0"
}
